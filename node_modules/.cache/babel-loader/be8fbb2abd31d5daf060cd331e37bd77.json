{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, Link, useHistory } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api/index\";\nimport AddCardsBtn from \"./AddCardsBtn\";\n\nfunction Study({\n  cardInfo,\n  setCardInfo,\n  currentCard,\n  setCurrentCard,\n  currentCards,\n  setCurrentCards,\n  currentDeck,\n  setCurrentDeck\n}) {\n  _s();\n\n  const {\n    deckId\n  } = useParams();\n  const history = useHistory();\n  const [flip, setFlip] = useState(true);\n\n  function handleFlip() {\n    setFlip(current => current = !flip);\n  }\n\n  function handleClick() {\n    if (currentCard < currentCards.length) {\n      setCurrentCard(prevState => prevState = prevState + 1);\n      setFlip(prevState => prevState = !flip);\n    } else {\n      if (window.confirm(\"Do you want to reset the deck?\")) {\n        setCurrentCard(prevState => prevState = 1);\n        setFlip(true);\n      } else {\n        history.push(\"/\");\n      }\n    }\n  }\n\n  useEffect(() => {\n    async function getDeck() {\n      const result = await readDeck(deckId);\n      const card = currentCard - 1;\n\n      try {\n        setCardInfo({\n          id: result.cards[card].id,\n          front: result.cards[card].front,\n          back: result.cards[card].back,\n          deckId: result.cards[card].deckId\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      setCurrentDeck(result);\n      setCurrentCards(result.cards);\n    }\n\n    getDeck();\n  }, [currentCard]);\n}\n\n_s(Study, \"jzPC7xDnyNDW2rA1s1YEDKIciPw=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Study;\nexport default Study;\n\nvar _c;\n\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"sources":["/Users/jordanfoor/Flashcards/src/Layout/Study.js"],"names":["React","useEffect","useState","useParams","Link","useHistory","readDeck","AddCardsBtn","Study","cardInfo","setCardInfo","currentCard","setCurrentCard","currentCards","setCurrentCards","currentDeck","setCurrentDeck","deckId","history","flip","setFlip","handleFlip","current","handleClick","length","prevState","window","confirm","push","getDeck","result","card","id","cards","front","back","error","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,UAA1B,QAA4C,kBAA5C;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,SAASC,KAAT,CAAe;AACbC,EAAAA,QADa;AAEbC,EAAAA,WAFa;AAGbC,EAAAA,WAHa;AAIbC,EAAAA,cAJa;AAKbC,EAAAA,YALa;AAMbC,EAAAA,eANa;AAObC,EAAAA,WAPa;AAQbC,EAAAA;AARa,CAAf,EASG;AAAA;;AACD,QAAM;AAAEC,IAAAA;AAAF,MAAad,SAAS,EAA5B;AACA,QAAMe,OAAO,GAAGb,UAAU,EAA1B;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,IAAD,CAAhC;;AAEA,WAASmB,UAAT,GAAsB;AACpBD,IAAAA,OAAO,CAAEE,OAAD,IAAcA,OAAO,GAAG,CAACH,IAA1B,CAAP;AACD;;AAED,WAASI,WAAT,GAAuB;AACrB,QAAIZ,WAAW,GAAGE,YAAY,CAACW,MAA/B,EAAuC;AACrCZ,MAAAA,cAAc,CAAEa,SAAD,IAAgBA,SAAS,GAAGA,SAAS,GAAG,CAAzC,CAAd;AACAL,MAAAA,OAAO,CAAEK,SAAD,IAAgBA,SAAS,GAAG,CAACN,IAA9B,CAAP;AACD,KAHD,MAGO;AACL,UAAIO,MAAM,CAACC,OAAP,CAAe,gCAAf,CAAJ,EAAsD;AACpDf,QAAAA,cAAc,CAAEa,SAAD,IAAgBA,SAAS,GAAG,CAA7B,CAAd;AACAL,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAHD,MAGO;AACLF,QAAAA,OAAO,CAACU,IAAR,CAAa,GAAb;AACD;AACF;AACF;;AAED3B,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAe4B,OAAf,GAAyB;AACvB,YAAMC,MAAM,GAAG,MAAMxB,QAAQ,CAACW,MAAD,CAA7B;AACA,YAAMc,IAAI,GAAGpB,WAAW,GAAG,CAA3B;;AACA,UAAI;AACFD,QAAAA,WAAW,CAAC;AACVsB,UAAAA,EAAE,EAAEF,MAAM,CAACG,KAAP,CAAaF,IAAb,EAAmBC,EADb;AAEVE,UAAAA,KAAK,EAAEJ,MAAM,CAACG,KAAP,CAAaF,IAAb,EAAmBG,KAFhB;AAGVC,UAAAA,IAAI,EAAEL,MAAM,CAACG,KAAP,CAAaF,IAAb,EAAmBI,IAHf;AAIVlB,UAAAA,MAAM,EAAEa,MAAM,CAACG,KAAP,CAAaF,IAAb,EAAmBd;AAJjB,SAAD,CAAX;AAMD,OAPD,CAOE,OAAOmB,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;;AAEDpB,MAAAA,cAAc,CAACc,MAAD,CAAd;AACAhB,MAAAA,eAAe,CAACgB,MAAM,CAACG,KAAR,CAAf;AACD;;AAEDJ,IAAAA,OAAO;AACR,GApBQ,EAoBN,CAAClB,WAAD,CApBM,CAAT;AAqBD;;GArDQH,K;UAUYL,S,EACHE,U;;;KAXTG,K;AAuDT,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams, Link, useHistory } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api/index\";\nimport AddCardsBtn from \"./AddCardsBtn\";\n\nfunction Study({\n  cardInfo,\n  setCardInfo,\n  currentCard,\n  setCurrentCard,\n  currentCards,\n  setCurrentCards,\n  currentDeck,\n  setCurrentDeck,\n}) {\n  const { deckId } = useParams();\n  const history = useHistory();\n  const [flip, setFlip] = useState(true);\n\n  function handleFlip() {\n    setFlip((current) => (current = !flip));\n  }\n\n  function handleClick() {\n    if (currentCard < currentCards.length) {\n      setCurrentCard((prevState) => (prevState = prevState + 1));\n      setFlip((prevState) => (prevState = !flip));\n    } else {\n      if (window.confirm(\"Do you want to reset the deck?\")) {\n        setCurrentCard((prevState) => (prevState = 1));\n        setFlip(true);\n      } else {\n        history.push(\"/\");\n      }\n    }\n  }\n\n  useEffect(() => {\n    async function getDeck() {\n      const result = await readDeck(deckId);\n      const card = currentCard - 1;\n      try {\n        setCardInfo({\n          id: result.cards[card].id,\n          front: result.cards[card].front,\n          back: result.cards[card].back,\n          deckId: result.cards[card].deckId,\n        });\n      } catch (error) {\n        console.log(error);\n      }\n\n      setCurrentDeck(result);\n      setCurrentCards(result.cards);\n    }\n\n    getDeck();\n  }, [currentCard]);\n}\n\nexport default Study;\n"]},"metadata":{},"sourceType":"module"}